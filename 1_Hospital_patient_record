-- Hospital Patient Records Analysis

type Patient = (String, Int, Int)

-- Sample Data (Name, Age, ReasonCode)
sampleData :: [Patient]
sampleData =
  [ ("Alice", 25, 1)
  , ("Bob", 40, 2)
  , ("Charlie", 15, 1)
  , ("David", 60, 3)
  , ("Eva", 35, 2)
  ]

-- Count patients by reason code using recursion
countReasons :: [Patient] -> (Int, Int, Int)
countReasons [] = (0, 0, 0)
countReasons ((_, _, r):xs) =
  let (c1, c2, c3) = countReasons xs
  in case r of
       1 -> (c1+1, c2, c3)
       2 -> (c1, c2+1, c3)
       3 -> (c1, c2, c3+1)
       _ -> (c1, c2, c3)  -- ignore invalid codes

-- Count adults (age >= 18) using recursion
countAdults :: [Patient] -> Int
countAdults [] = 0
countAdults ((_, age, _):xs)
  | age >= 18 = 1 + countAdults xs
  | otherwise = countAdults xs

-- Parse input of form "Name:Age:Reason"
parseRecord :: String -> Patient
parseRecord str =
  let parts = split ':' str
  in case parts of
       [n, a, r] -> (n, read a, read r)
       _         -> ("Unknown", 0, 0)

-- Custom split function (no libraries)
split :: Char -> String -> [String]
split _ [] = [""]
split delim (c:cs)
  | c == delim = "" : rest
  | otherwise  = (c : head rest) : tail rest
  where
    rest = split delim cs

-- Main logic
main :: IO ()
main = do
  putStrLn "Enter patient records (Name:Age:Reason), one per line. Empty line to finish:"
  input <- getContents
  let ls = lines input
      patients = if null ls then sampleData else map parseRecord ls
      (c1, c2, c3) = countReasons patients
      adults = countAdults patients
  putStrLn $ "General Checkup: " ++ show c1
  putStrLn $ "Emergency: " ++ show c2
  putStrLn $ "Surgery: " ++ show c3
  putStrLn $ "Total Adults: " ++ show adults



Sample input:
John:22:1
Mary:17:2
Sam:45:3
